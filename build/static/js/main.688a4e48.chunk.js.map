{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","document","getElementById","innerHTML","u","value","xhr","XMLHttpRequest","open","send","onload","response","JSON","parse","this","responseText","i","items","full_name","description","lang","language","stars","stargazers_count","resu","createElement","id","className","col1","col6","col4","icon","hr","appendChild","a","href","html_url","target","head","desc","langu","star","type","placeholder","onClick","search","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAgHeA,G,uLApGXC,SAASC,eAAe,UAAUC,UAAY,GAC9C,IACIC,EAAI,oFADAH,SAASC,eAAe,QAAQG,MAEpCC,EAAM,IAAIC,eAEdD,EAAIE,KAAK,MAAOJ,GAChBE,EAAIG,OACJH,EAAII,OAAS,WAGX,IAFA,IAAIC,EAAWC,KAAKC,MAAMC,KAAKC,cAC3BC,EAAI,EACDL,EAASM,MAAMD,IAAI,CACxB,IAAIE,EAAYP,EAASM,MAAMD,GAAGE,UAC9BC,EAAcR,EAASM,MAAMD,GAAGG,YAChCC,EAAOT,EAASM,MAAMD,GAAGK,SACzBC,EAAQX,EAASM,MAAMD,GAAGO,iBAC1BC,EAAOvB,SAASwB,cAAc,OAClCD,EAAKE,GAAK,UACVF,EAAKG,UAAY,MACjB,IAAIC,EAAO3B,SAASwB,cAAc,OAC9BI,EAAO5B,SAASwB,cAAc,OAC9BK,EAAO7B,SAASwB,cAAc,OAC9BM,EAAO9B,SAASwB,cAAc,KAC9BO,EAAK/B,SAASwB,cAAc,MAEhCM,EAAKJ,UAAY,aACjBC,EAAKD,UAAY,WACjBE,EAAKF,UAAY,WACjBG,EAAKH,UAAY,WACjBH,EAAKS,YAAYL,GACjB,IAAIM,EAAIjC,SAASwB,cAAc,KAC/BS,EAAEC,KAAOxB,EAASM,MAAMD,GAAGoB,SAC3BF,EAAEG,OAAS,SACX,IAAIC,EAAOrC,SAASwB,cAAc,MAClCa,EAAKZ,GAAK,UACVQ,EAAED,YAAYK,GACdJ,EAAED,YAAYhC,SAASwB,cAAc,OACrCS,EAAED,YAAYhC,SAASwB,cAAc,OACrCS,EAAED,YAAYD,GAEdM,EAAKnC,UAAYe,EAEjB,IAAIqB,EAAOtC,SAASwB,cAAc,KAClCc,EAAKpC,UAAYgB,EACjBoB,EAAKb,GAAK,QAGV,IAAIc,EAAQvC,SAASwB,cAAc,KACnCe,EAAMrC,UAAYiB,EAClBoB,EAAMd,GAAK,OACX,IAAIe,EAAOxC,SAASwB,cAAc,KAClCgB,EAAKtC,UAAYmB,EACjBmB,EAAKf,GAAK,OACVK,EAAK5B,UAAYmB,EAKjBO,EAAKI,YAAYC,GACjBL,EAAKI,YAAYM,GAEjBf,EAAKS,YAAYJ,GACjBC,EAAKG,YAAYO,GACjBV,EAAKG,YAAYF,GAEjBP,EAAKS,YAAYH,GACjBA,EAAKG,YAAYhC,SAASwB,cAAc,OAExCD,EAAKS,YAAYD,GAIjB/B,SAASC,eAAe,UAAU+B,YAAYT,GAE9CR,Q,+BAQJ,OACE,yBAAKW,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cACb,2BAAOe,KAAK,OAAOf,UAAU,aAAaD,GAAG,OAAOiB,YAAY,0BAChE,4BAAQhB,UAAU,aAAaD,GAAG,SAASkB,QAAS9B,KAAK+B,QAAQ,uBAAGlB,UAAU,oBAIlF,yBAAKD,GAAG,SAASC,UAAU,mB,GA9FjBmB,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrD,SAASC,eAAe,SD2H3C,kBAAmBqD,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.688a4e48.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n\n\n\n\nclass App extends React.Component {\n\n  search() {\n\n    document.getElementById('result').innerHTML = \"\";\n    var s = document.getElementById('srch').value;\n    var u = 'https://cors-anywhere.herokuapp.com/https://api.github.com/search/repositories?q=' + s;\n    var xhr = new XMLHttpRequest();\n\n    xhr.open('GET', u);\n    xhr.send();\n    xhr.onload = function () {\n      var response = JSON.parse(this.responseText);\n      var i = 0;\n      while (response.items[i]) {\n        var full_name = response.items[i].full_name;\n        var description = response.items[i].description;\n        var lang = response.items[i].language;\n        var stars = response.items[i].stargazers_count;\n        var resu = document.createElement('div');\n        resu.id = \"resulty\";\n        resu.className = \"row\";\n        var col1 = document.createElement('div');\n        var col6 = document.createElement('div');\n        var col4 = document.createElement('div');\n        var icon = document.createElement('i');\n        var hr = document.createElement('hr');\n\n        icon.className = \"fa fa-star\";\n        col1.className = \"col-md-1\";\n        col6.className = \"col-md-6\";\n        col4.className = \"col-md-4\";\n        resu.appendChild(col1);\n        var a = document.createElement('a');\n        a.href = response.items[i].html_url;\n        a.target = \"_blank\"\n        var head = document.createElement('h2');\n        head.id = \"heading\";\n        a.appendChild(head);\n        a.appendChild(document.createElement('br'));\n        a.appendChild(document.createElement('br'));\n        a.appendChild(hr);\n\n        head.innerHTML = full_name;\n\n        var desc = document.createElement('p');\n        desc.innerHTML = description;\n        desc.id = \"descr\";\n\n\n        var langu = document.createElement('p');\n        langu.innerHTML = lang;\n        langu.id = \"lang\";\n        var star = document.createElement('p');\n        star.innerHTML = stars;\n        star.id = \"star\";\n        icon.innerHTML = stars;\n\n\n\n\n        col6.appendChild(a);\n        col6.appendChild(desc);\n\n        resu.appendChild(col6);\n        col4.appendChild(langu);\n        col4.appendChild(icon);\n\n        resu.appendChild(col4);\n        col4.appendChild(document.createElement('br'));\n\n        resu.appendChild(hr);\n\n\n\n        document.getElementById('result').appendChild(resu);\n\n        i++;\n      }\n    }\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"search_bar\">\n          <div className=\"search_box\">\n            <input type='text' className='searchTerm' id=\"srch\" placeholder='Search Reopsitory....'></input>\n            <button className='searchTerm' id=\"submit\" onClick={this.search}><i className=\"fa fa-search\"></i></button>\n          </div>\n        </div>\n\n        <div id=\"result\" className=\"container\">\n\n        </div>\n\n\n      </div>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}